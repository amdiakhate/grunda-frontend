/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ProductsListImport } from './routes/products/list'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ProductsListRoute = ProductsListImport.update({
  id: '/products/list',
  path: '/products/list',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/products/list': {
      id: '/products/list'
      path: '/products/list'
      fullPath: '/products/list'
      preLoaderRoute: typeof ProductsListImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRoute
  '/about': typeof AboutLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/products/list': typeof ProductsListRoute
}

export interface FileRoutesByTo {
  '/dashboard': typeof DashboardRoute
  '/about': typeof AboutLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/products/list': typeof ProductsListRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard': typeof DashboardRoute
  '/about': typeof AboutLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/products/list': typeof ProductsListRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard' | '/about' | '/settings' | '/products/list'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard' | '/about' | '/settings' | '/products/list'
  id: '__root__' | '/dashboard' | '/about' | '/settings' | '/products/list'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRoute
  AboutLazyRoute: typeof AboutLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  ProductsListRoute: typeof ProductsListRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRoute,
  AboutLazyRoute: AboutLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  ProductsListRoute: ProductsListRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/about",
        "/settings",
        "/products/list"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/products/list": {
      "filePath": "products/list.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
